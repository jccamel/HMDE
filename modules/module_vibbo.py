#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import inspect
# ****************  para pder importar modulos del directorio parent *******************
import os
import sys
from random import randint
from time import sleep

current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
# ***************************************************************************************
from modules.util import *

# Globals
"""
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++  DICCIONARIO DE TELEFONOS DE USUARIOS DE VIBBO  ++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
En éste diccionario la clave representa el nombre del GIF y el valor el numero de teléfono
Ejemplo:
Si tenemos los siguientes gifs: 114.gif 105.gif y 106.gif
El numero de telefono resultante será: 636 722 324
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"""
telefonos = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 100: '029', 101: '232',
             102: '283', 103: '397', 104: '780', 105: '722', 106: '324', 107: '749', 108: '147', 109: '317',
             110: '230', 111: '992', 112: '239', 113: '229', 114: '636', 115: '610', 116: '999', 117: '962',
             118: '804', 119: '831', 120: '720', 121: '358', 122: '954', 123: '389', 124: '627', 125: '514',
             126: '092', 127: '557', 128: '687', 129: '642', 130: '854', 131: '427', 132: '766', 133: '467',
             134: '535', 135: '829', 136: '370', 137: '275', 138: '553', 139: '873', 140: '525', 141: '408',
             142: '542', 143: '442', 144: '401', 145: '786', 146: '474', 147: '005', 148: '799', 149: '745',
             150: '665', 151: '366', 152: '152', 153: '180', 154: '966', 155: '330', 156: '074', 157: '608',
             158: '161', 159: '769', 160: '836', 161: '841', 162: '036', 163: '948', 164: '492', 165: '306',
             166: '617', 167: '978', 168: '182', 169: '728', 170: '675', 171: '821', 172: '580', 173: '574',
             174: '699', 175: '453', 176: '603', 177: '315', 178: '008', 179: '367', 180: '188', 181: '344',
             182: '086', 183: '711', 184: '606', 185: '128', 186: '434', 187: '286', 188: '635', 189: '267',
             190: '721', 191: '877', 192: '529', 193: '706', 194: '590', 195: '136', 196: '731', 197: '809',
             198: '143', 199: '025', 200: '415', 201: '717', 202: '713', 203: '897', 204: '997', 205: '225',
             206: '096', 207: '171', 208: '726', 209: '765', 210: '619', 211: '955', 212: '276', 213: '852',
             214: '657', 215: '466', 216: '887', 217: '828', 218: '026', 219: '947', 220: '263', 221: '952',
             222: '933', 223: '625', 224: '284', 225: '653', 226: '510', 227: '384', 228: '139', 229: '806',
             230: '888', 231: '447', 232: '359', 233: '935', 234: '379', 235: '113', 236: '227', 237: '487',
             238: '334', 239: '704', 240: '410', 241: '485', 242: '149', 243: '951', 244: '920', 245: '776',
             246: '130', 247: '288', 248: '694', 249: '566', 250: '932', 251: '351', 252: '602', 253: '698',
             254: '684', 255: '017', 256: '793', 257: '423', 258: '470', 259: '299', 260: '668', 261: '790',
             262: '914', 263: '709', 264: '916', 265: '527', 266: '959', 267: '094', 268: '640', 269: '272',
             270: '082', 271: '646', 272: '407', 273: '475', 274: '400', 275: '212', 276: '031', 277: '658',
             278: '969', 279: '057', 280: '686', 281: '032', 282: '126', 283: '176', 284: '871', 285: '736',
             286: '701', 287: '345', 288: '867', 289: '744', 290: '035', 291: '926', 292: '648', 293: '770',
             294: '872', 295: '591', 296: '742', 297: '674', 298: '497', 299: '046', 300: '796', 301: '633',
             302: '859', 303: '664', 304: '412', 305: '186', 306: '639', 307: '541', 308: '552', 309: '808',
             310: '158', 311: '904', 312: '562', 313: '918', 314: '734', 315: '576', 316: '652', 317: '131',
             318: '870', 319: '154', 320: '788', 321: '908', 322: '123', 323: '844', 324: '177', 325: '778',
             326: '388', 327: '160', 328: '758', 329: '329', 330: '559', 331: '822', 332: '369', 333: '478',
             334: '555', 335: '196', 336: '568', 337: '733', 338: '084', 339: '989', 340: '365', 341: '598',
             342: '261', 343: '205', 344: '318', 345: '840', 346: '879', 347: '028', 348: '308', 349: '181',
             350: '945', 351: '209', 352: '220', 353: '986', 354: '418', 355: '493', 356: '464', 357: '583',
             358: '190', 359: '775', 360: '240', 361: '346', 362: '156', 363: '011', 364: '383', 365: '159',
             366: '620', 367: '380', 368: '895', 369: '420', 370: '943', 371: '922', 372: '214', 373: '677',
             374: '781', 375: '740', 376: '155', 377: '807', 378: '814', 379: '000', 380: '080', 381: '444',
             382: '819', 383: '203', 384: '547', 385: '421', 386: '860', 387: '815', 388: '925', 389: '641',
             390: '906', 391: '961', 392: '320', 393: '070', 394: '880', 395: '915', 396: '121', 397: '090',
             398: '373', 399: '939', 400: '218', 401: '471', 402: '923', 403: '355', 404: '805', 405: '468',
             406: '233', 407: '311', 408: '231', 409: '715', 410: '839', 411: '753', 412: '990', 413: '991',
             414: '810', 415: '483', 416: '813', 417: '930', 418: '638', 419: '048', 420: '982', 421: '234',
             422: '349', 423: '660', 424: '784', 425: '917', 426: '364', 427: '473', 428: '875', 429: '581',
             430: '404', 431: '537', 432: '732', 433: '886', 434: '050', 435: '168', 436: '199', 437: '265',
             438: '268', 439: '463', 440: '151', 441: '849', 442: '946', 443: '472', 444: '705', 445: '030',
             446: '378', 447: '691', 448: '022', 449: '676', 450: '950', 451: '446', 452: '332', 453: '967',
             454: '187', 455: '834', 456: '375', 457: '371', 458: '599', 459: '224', 460: '242', 461: '236',
             462: '924', 463: '262', 464: '564', 465: '690', 466: '777', 467: '204', 468: '792', 469: '347',
             470: '222', 471: '301', 472: '905', 473: '211', 474: '285', 475: '060', 476: '495', 477: '461',
             478: '326', 479: '350', 480: '247', 481: '823', 482: '692', 483: '909', 484: '107', 485: '172',
             486: '751', 487: '883', 488: '910', 489: '280', 490: '319', 491: '392', 492: '629', 493: '812',
             494: '259', 495: '993', 496: '044', 497: '748', 498: '968', 499: '287', 500: '429', 501: '291',
             502: '142', 503: '437', 504: '244', 505: '001', 506: '571', 507: '430', 508: '987', 509: '106',
             510: '628', 511: '995', 512: '040', 513: '133', 514: '912', 515: '298', 516: '563', 517: '314',
             518: '927', 519: '456', 520: '506', 521: '443', 522: '329', 523: '903', 524: '257', 525: '853',
             526: '800', 527: '226', 528: '667', 529: '424', 530: '560', 531: '516', 532: '278', 533: '730',
             534: '356', 535: '958', 536: '655', 537: '607', 538: '360', 539: '755', 540: '971', 541: '124',
             542: '801', 543: '249', 544: '219', 545: '431', 546: '295', 547: '316', 548: '782', 549: '532',
             550: '289', 551: '893', 552: '697', 553: '556', 554: '862', 555: '150', 556: '411', 557: '020',
             558: '818', 559: '241', 560: '217', 561: '536', 562: '277', 563: '614', 564: '479', 565: '738',
             566: '114', 567: '064', 568: '112', 569: '981', 570: '179', 571: '929', 572: '189', 573: '041',
             574: '724', 575: '163', 576: '255', 577: '565', 578: '523', 579: '166', 580: '039', 581: '129',
             582: '901', 583: '988', 584: '381', 585: '462', 586: '459', 587: '135', 588: '213', 589: '037',
             590: '018', 591: '584', 592: '076', 593: '056', 594: '513', 595: '003', 596: '021', 597: '336',
             598: '390', 599: '043', 600: '183', 601: '550', 602: '718', 603: '707', 604: '764', 605: '725',
             606: '322', 607: '047', 608: '072', 609: '104', 610: '264', 611: '881', 612: '246', 613: '868',
             614: '210', 615: '165', 616: '302', 617: '857', 618: '361', 619: '191', 620: '012', 621: '195',
             622: '303', 623: '682', 624: '530', 625: '964', 626: '309', 627: '963', 628: '921', 629: '202',
             630: '297', 631: '228', 632: '585', 633: '980', 634: '503', 635: '752', 636: '850', 637: '712',
             638: '650', 639: '582', 640: '601', 641: '300', 642: '256', 643: '002', 644: '681', 645: '680',
             646: '515', 647: '328', 648: '348', 649: '034', 650: '612', 651: '405', 652: '357', 653: '774',
             654: '783', 655: '944', 656: '167', 657: '511', 658: '024', 659: '193', 660: '023', 661: '795',
             662: '504', 663: '543', 664: '855', 665: '192', 666: '208', 667: '548', 668: '647', 669: '984',
             670: '848', 671: '794', 672: '100', 673: '146', 674: '450', 675: '066', 676: '095', 677: '994',
             678: '270', 679: '768', 680: '743', 681: '894', 682: '716', 683: '343', 684: '643', 685: '454',
             686: '570', 687: '340', 688: '985', 689: '983', 690: '102', 691: '941', 692: '445', 693: '659',
             694: '509', 695: '014', 696: '518', 697: '093', 698: '174', 699: '386', 700: '279', 701: '027',
             702: '977', 703: '376', 704: '771', 705: '004', 706: '091', 707: '460', 708: '215', 709: '321',
             710: '439', 711: '976', 712: '577', 713: '678', 714: '579', 715: '595', 716: '892', 717: '108',
             718: '856', 719: '965', 720: '327', 721: '331', 722: '010', 723: '754', 724: '773', 725: '368',
             726: '762', 727: '307', 728: '063', 729: '940', 730: '110', 731: '757', 732: '436', 733: '759',
             734: '402', 735: '428', 736: '826', 737: '117', 738: '864', 739: '689', 740: '116', 741: '708',
             742: '851', 743: '919', 744: '119', 745: '956', 746: '455', 747: '666', 748: '162', 749: '103',
             750: '498', 751: '817', 752: '899', 753: '235', 754: '323', 755: '491', 756: '586', 757: '891',
             758: '438', 759: '148', 760: '885', 761: '507', 762: '858', 763: '341', 764: '480', 765: '835',
             766: '200', 767: '611', 768: '572', 769: '847', 770: '656', 771: '019', 772: '938', 773: '618',
             774: '109', 775: '671', 776: '394', 777: '489', 778: '417', 779: '673', 780: '305', 781: '006',
             782: '087', 783: '949', 784: '896', 785: '802', 786: '789', 787: '589', 788: '053', 789: '038',
             790: '403', 791: '811', 792: '890', 793: '393', 794: '505', 795: '338', 796: '747', 797: '696',
             798: '099', 799: '271', 800: '097', 801: '083', 802: '141', 803: '645', 804: '710', 805: '138',
             806: '198', 807: '672', 808: '974', 809: '290', 810: '125', 811: '465', 812: '015', 813: '688',
             814: '833', 815: '033', 816: '521', 817: '863', 818: '737', 819: '157', 820: '251', 821: '273',
             822: '502', 823: '419', 824: '409', 825: '573', 826: '876', 827: '739', 828: '587', 829: '457',
             830: '501', 831: '293', 832: '719', 833: '798', 834: '058', 835: '069', 836: '884', 837: '760',
             838: '763', 839: '960', 840: '953', 841: '508', 842: '007', 843: '975', 844: '238', 845: '077',
             846: '767', 847: '395', 848: '936', 849: '842', 850: '254', 851: '928', 852: '913', 853: '252',
             854: '396', 855: '175', 856: '937', 857: '889', 858: '663', 859: '621', 860: '194', 861: '118',
             862: '140', 863: '785', 864: '310', 865: '313', 866: '845', 867: '499', 868: '134', 869: '544',
             870: '569', 871: '282', 872: '558', 873: '185', 874: '088', 875: '059', 876: '422', 877: '803',
             878: '670', 879: '337', 880: '723', 881: '661', 882: '078', 883: '874', 884: '632', 885: '052',
             886: '597', 887: '451', 888: '065', 889: '911', 890: '622', 891: '333', 892: '387', 893: '469',
             894: '825', 895: '490', 896: '685', 897: '073', 898: '702', 899: '354', 900: '700', 901: '998',
             902: '042', 903: '352', 904: '898', 905: '837', 906: '488', 907: '593', 908: '145', 909: '013',
             910: '604', 911: '500', 912: '477', 913: '144', 914: '398', 915: '630', 916: '353', 917: '578',
             918: '476', 919: '258', 920: '649', 921: '772', 922: '637', 923: '654', 924: '741', 925: '613',
             926: '372', 927: '482', 928: '779', 929: '787', 930: '838', 931: '184', 932: '519', 933: '269',
             934: '596', 935: '452', 936: '761', 937: '538', 938: '973', 939: '549', 940: '339', 941: '934',
             942: '669', 943: '391', 944: '342', 945: '561', 946: '746', 947: '644', 948: '592', 949: '902',
             950: '575', 951: '425', 952: '567', 953: '281', 954: '253', 955: '693', 956: '979', 957: '662',
             958: '907', 959: '524', 960: '496', 961: '406', 962: '634', 963: '996', 964: '049', 965: '832',
             966: '545', 967: '061', 968: '727', 969: '865', 970: '173', 971: '441', 972: '137', 973: '433',
             974: '304', 975: '266', 976: '631', 977: '972', 978: '067', 979: '540', 980: '440', 981: '605',
             982: '843', 983: '243', 984: '626', 985: '296', 986: '120', 987: '615', 988: '111', 989: '534',
             990: '374', 991: '616', 992: '335', 993: '546', 994: '363', 995: '957', 996: '016', 997: '554',
             998: '325', 999: '486'}


# Vibbo Class
class VibboApp(object):

    def __init__(self, proxy_select):
        from selenium import webdriver
        from selenium.webdriver.common.proxy import Proxy, ProxyType
        from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
        self.path = 'ChromeDriver\chromedriver'
        capabilities = dict(DesiredCapabilities.CHROME)
        if proxy_select:
            proxyrotator = proxy_rotator()
            proxy = Proxy({
                'proxyType': ProxyType.MANUAL,
                'httpProxy': proxyrotator['proxy'],
            })
            proxy.add_to_capabilities(capabilities)
        chrome_options = webdriver.ChromeOptions()
        prefs = {"profile.managed_default_content_settings.images": 2}
        chrome_options.add_experimental_option("prefs", prefs)
        chrome_options.page_load_strategy = 'normal'
        self.driver = webdriver.Chrome(self.path, desired_capabilities=capabilities, options=chrome_options)
        self.driver.set_window_position(0, 0)
        self.driver.set_window_size(1024, 800)
        self.driver.set_page_load_timeout(600)
        self.login_url = 'https://com.vibbo.com/usrarea/login/'
        self.driver.get(self.login_url)
        self.error = False
        self.listado_url_products = []
        print('Object created')

    def __del__(self):
        pass

    def closeApp(self):
        self.driver.close()

    def charge_page(self, url):
        self.driver.get(url)

    def log_in(self, user, password):
        try:
            # login process  --------------------------------------------------------------------------------------
            user_name_input = self.driver.find_element_by_id("log_email")
            user_name_input.send_keys(user)
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            print('User input')
            sleep(randint(2, 5))
            password_input = self.driver.find_element_by_id("log_pwd")
            password_input.send_keys(password)
            sleep(randint(1, 3))
            self.driver.find_element_by_id("button1").click()
            print('Password input')
            sleep(randint(2, 4))
        except Exception:
            print('Some exception occurred while trying to find username or password field')
            self.error = True

    def get_products_main_page(self):
        sleep(randint(3, 7))
        self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        list_prods = []
        while True:
            try:
                html_source = self.driver.page_source
                soup_packtpage = BeautifulSoup(html_source, 'lxml')
                classes = soup_packtpage.find_all('div', {"class": "basicList flip-container list_ads_row"})
                for clas in classes:
                    list_prods.append(clas.a.get('href').split('//')[1])
                sleep(randint(2, 6))
                self.driver.find_element_by_class_name("icon-ics_navigation_ic_Forward").click()
            except Exception as e:
                print("Last page reached")
                print(list_prods)
                print('Total de productos: ' + str(len(list_prods)))
                #  return list_prods


def recupera_tabla_list_container_vibbo(url, proxy):
    # get the HTML of the table called site Table where all the links are displayed
    sleep(randint(3, 7))
    conten, status = request(url, proxy)
    extracted_records = []
    if status == 200:
        soup_packtpage = BeautifulSoup(conten, 'lxml')
        print(soup_packtpage)
        objetos = soup_packtpage.find_all("div", class_="basicList flip-container list_ads_row")
        for objeto in objetos:
            data = objeto.find('div', class_='thumbnail_container')
            record = {
                'id': objeto.get('id'),
                'title': data.a.get('title'),
                'url':  data.a.get('href'),
                'loc': objeto.find("p", class_="zone").a.text
            }
            extracted_records.append(record)
    else:
        print('status code: ' + str(status))
    return extracted_records


def recupera_producto_vibbo(objeto, proxy):
    url = 'https:' + objeto['url']
    sleep(randint(3, 9))
    conten, status = request(url, proxy)
    print('------------------------------------------------------------------')
    print(url)
    print('Status Code: ' + str(status))
    print('------------------------------------------------------------------')
    soup_packtpage = get_soup_packtpage(conten)
    extracted_records = {}
    try:
        record_fotos = []
        fotos = soup_packtpage.find('div', class_='slidesjs-control')
        children_fotos = fotos.findChildren("img", recursive=False)
        for child in children_fotos:
            record_fotos.append(child['onclick'].split('//')[1].replace("'", "").split(')')[0])
    except:
        pass
    try:
        telefono = ''
        tel = soup_packtpage.find('div', class_='tel')
        children_telefono = tel.findChildren("img", recursive=False)
        for child in children_telefono:
            numero = int(child['src'].split('/')[1].split('.')[0])
            telefono = telefono + (telefonos.get(numero))
    except:
        pass
    try:
        desc= ''
        descripcion = soup_packtpage.find('p', class_='descriptionLong no_sel')
        desc = descripcion.text.lstrip().rstrip().replace("\n", " ")
    except:
        pass
    try:
        pub = ''
        publicado = soup_packtpage.find('div', class_='ad_date')
        pub = publicado.text.lstrip().rstrip().split(': ')[1]
    except:
        pass
    extracted_records = {
        'fotos': record_fotos,
        'telefono': telefono,
        'descripcion': desc,
        'publicado': pub
    }
    extracted_records.update(objeto)
    return extracted_records


"""

while True:
    try:
        driver.execute_script("return arguments[0].scrollIntoView(true);", WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CLASS_NAME, "icon-ics_navigation_ic_Forward"))))
        driver.find_element_by_class_name("icon-ics_navigation_ic_Forward").click()
        print("Navigating to Next Page")
    except (TimeoutException, WebDriverException) as e:
        print("Last page reached")
        break
"""